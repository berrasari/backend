{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem } from '@strapi/design-system/Grid';\nimport { Box } from '@strapi/design-system/Box';\nimport { Checkbox } from '@strapi/design-system/Checkbox';\nimport { Flex } from '@strapi/design-system/Flex';\nimport { Typography } from '@strapi/design-system/Typography';\nimport { useIntl } from 'react-intl';\nimport get from 'lodash/get';\n\nvar IS_DISABLED = function () {\n  if (window && window.strapi && window.strapi.isEE) {\n    return require('../../../../../../../../../../ee/admin/pages/SettingsPage/pages/Roles/EditPage/components/PluginsAndSettings/SubCategory/utils/constants')[\"default\"];\n  }\n\n  return require('./utils/constants')[\"default\"];\n}();\n\nimport { usePermissionsDataManager } from '../../../../../../../../hooks';\nimport { getCheckboxState, removeConditionKeyFromData } from '../../utils';\nimport ConditionsButton from '../../ConditionsButton';\nimport ConditionsModal from '../../ConditionsModal';\nimport { formatActions, getConditionsButtonState } from './utils';\nvar Border = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"SubCategory__Border\",\n  componentId: \"sc-akgczm-0\"\n})([\"flex:1;align-self:center;border-top:1px solid \", \";\"], function (_ref) {\n  var theme = _ref.theme;\n  return theme.colors.neutral150;\n});\nvar CheckboxWrapper = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"SubCategory__CheckboxWrapper\",\n  componentId: \"sc-akgczm-1\"\n})([\"position:relative;word-break:keep-all;\", \"\"], function (_ref2) {\n  var hasConditions = _ref2.hasConditions,\n      disabled = _ref2.disabled,\n      theme = _ref2.theme;\n  return hasConditions && \"\\n    &:before {\\n      content: '';\\n      position: absolute;\\n      top: \".concat(-4 / 16, \"rem;\\n      left: \").concat(-8 / 16, \"rem;\\n      width: \").concat(6 / 16, \"rem;\\n      height: \").concat(6 / 16, \"rem;\\n      border-radius: \").concat(20 / 16, \"rem;\\n      background: \").concat(disabled ? theme.colors.neutral100 : theme.colors.primary600, \";\\n    }\\n  \");\n});\n\nvar SubCategory = function SubCategory(_ref3) {\n  var categoryName = _ref3.categoryName,\n      isFormDisabled = _ref3.isFormDisabled,\n      subCategoryName = _ref3.subCategoryName,\n      actions = _ref3.actions,\n      pathToData = _ref3.pathToData;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isModalOpen = _useState2[0],\n      setModalOpen = _useState2[1];\n\n  var _usePermissionsDataMa = usePermissionsDataManager(),\n      modifiedData = _usePermissionsDataMa.modifiedData,\n      onChangeParentCheckbox = _usePermissionsDataMa.onChangeParentCheckbox,\n      onChangeSimpleCheckbox = _usePermissionsDataMa.onChangeSimpleCheckbox;\n\n  var _useIntl = useIntl(),\n      formatMessage = _useIntl.formatMessage;\n\n  var mainData = get(modifiedData, pathToData, {});\n  var dataWithoutCondition = useMemo(function () {\n    return Object.keys(mainData).reduce(function (acc, current) {\n      acc[current] = removeConditionKeyFromData(mainData[current]);\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  var _getCheckboxState = getCheckboxState(dataWithoutCondition),\n      hasAllActionsSelected = _getCheckboxState.hasAllActionsSelected,\n      hasSomeActionsSelected = _getCheckboxState.hasSomeActionsSelected;\n\n  var handleToggleModalIsOpen = function handleToggleModalIsOpen() {\n    setModalOpen(function (s) {\n      return !s;\n    });\n  };\n\n  var handleModalClose = function handleModalClose() {\n    setModalOpen(false);\n  }; // We need to format the actions so it matches the shape of the ConditionsModal actions props\n\n\n  var formattedActions = formatActions(actions, modifiedData, pathToData);\n  var doesButtonHasCondition = getConditionsButtonState(get(modifiedData, _toConsumableArray(pathToData), {}));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Flex, {\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  }, /*#__PURE__*/React.createElement(Box, {\n    paddingRight: 4\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"sigma\",\n    textColor: \"neutral600\"\n  }, subCategoryName)), /*#__PURE__*/React.createElement(Border, null), /*#__PURE__*/React.createElement(Box, {\n    paddingLeft: 4\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    name: pathToData.join('..'),\n    disabled: isFormDisabled || IS_DISABLED // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n    ,\n    onValueChange: function onValueChange(value) {\n      onChangeParentCheckbox({\n        target: {\n          name: pathToData.join('..'),\n          value: value\n        }\n      });\n    },\n    indeterminate: hasSomeActionsSelected,\n    value: hasAllActionsSelected\n  }, formatMessage({\n    id: 'app.utils.select-all',\n    defaultMessage: 'Select all'\n  })))), /*#__PURE__*/React.createElement(Flex, {\n    paddingTop: 6,\n    paddingBottom: 6\n  }, /*#__PURE__*/React.createElement(Grid, {\n    gap: 2,\n    style: {\n      flex: 1\n    }\n  }, formattedActions.map(function (_ref4) {\n    var checkboxName = _ref4.checkboxName,\n        value = _ref4.value,\n        action = _ref4.action,\n        displayName = _ref4.displayName,\n        hasConditions = _ref4.hasConditions;\n    return /*#__PURE__*/React.createElement(GridItem, {\n      col: 3,\n      key: action\n    }, /*#__PURE__*/React.createElement(CheckboxWrapper, {\n      disabled: isFormDisabled || IS_DISABLED,\n      hasConditions: hasConditions\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      name: checkboxName,\n      disabled: isFormDisabled || IS_DISABLED // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n      ,\n      onValueChange: function onValueChange(value) {\n        onChangeSimpleCheckbox({\n          target: {\n            name: checkboxName,\n            value: value\n          }\n        });\n      },\n      value: value\n    }, displayName)));\n  })), /*#__PURE__*/React.createElement(ConditionsButton, {\n    hasConditions: doesButtonHasCondition,\n    onClick: handleToggleModalIsOpen\n  }))), isModalOpen && /*#__PURE__*/React.createElement(ConditionsModal, {\n    headerBreadCrumbs: [categoryName, subCategoryName],\n    actions: formattedActions,\n    isFormDisabled: isFormDisabled,\n    onClosed: handleModalClose,\n    onToggle: handleToggleModalIsOpen\n  }));\n};\n\nSubCategory.propTypes = {\n  actions: PropTypes.array.isRequired,\n  categoryName: PropTypes.string.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  subCategoryName: PropTypes.string.isRequired,\n  pathToData: PropTypes.array.isRequired\n};\nexport default SubCategory;","map":null,"metadata":{},"sourceType":"module"}