{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { memo, useCallback, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\nimport { BaseCheckbox } from '@strapi/design-system/BaseCheckbox';\nimport { Flex } from '@strapi/design-system/Flex';\nimport get from 'lodash/get';\n\nvar IS_DISABLED = function () {\n  if (window && window.strapi && window.strapi.isEE) {\n    return require('../../../../../../../../../../../ee/admin/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypeCollapse/CollapsePropertyMatrix/ActionRow/utils/constants')[\"default\"];\n  }\n\n  return require('./utils/constants')[\"default\"];\n}();\n\nimport { usePermissionsDataManager } from '../../../../../../../../../hooks';\nimport HiddenAction from '../../../HiddenAction';\nimport { cellWidth, rowHeight } from '../../../Permissions/utils/constants';\nimport RequiredSign from '../../../RequiredSign';\nimport RowLabelWithCheckbox from '../../../RowLabelWithCheckbox';\nimport { getCheckboxState } from '../../../utils';\nimport { activeStyle } from '../../utils';\nimport CarretIcon from '../CarretIcon';\nimport SubActionRow from '../SubActionRow';\nimport getRowLabelCheckboxeState from './utils/getRowLabelCheckboxeState';\nvar Cell = /*#__PURE__*/styled(Flex).withConfig({\n  displayName: \"ActionRow__Cell\",\n  componentId: \"sc-4agenc-0\"\n})([\"width:\", \";position:relative;\"], cellWidth);\nvar Wrapper = /*#__PURE__*/styled(Flex).withConfig({\n  displayName: \"ActionRow__Wrapper\",\n  componentId: \"sc-4agenc-1\"\n})([\"height:\", \";flex:1;\", \" \", \";\"], rowHeight, function (_ref) {\n  var isCollapsable = _ref.isCollapsable,\n      theme = _ref.theme;\n  return isCollapsable && \"\\n      \".concat(CarretIcon, \" {\\n        display: block;\\n        color: \").concat(theme.colors.neutral100, \";\\n      }\\n      &:hover {\\n        \").concat(activeStyle(theme), \"\\n      }\\n  \");\n}, function (_ref2) {\n  var isActive = _ref2.isActive,\n      theme = _ref2.theme;\n  return isActive && activeStyle(theme);\n});\n\nvar ActionRow = function ActionRow(_ref3) {\n  var childrenForm = _ref3.childrenForm,\n      label = _ref3.label,\n      isFormDisabled = _ref3.isFormDisabled,\n      name = _ref3.name,\n      required = _ref3.required,\n      pathToData = _ref3.pathToData,\n      propertyActions = _ref3.propertyActions,\n      propertyName = _ref3.propertyName,\n      isOdd = _ref3.isOdd;\n\n  var _useIntl = useIntl(),\n      formatMessage = _useIntl.formatMessage;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      rowToOpen = _useState2[0],\n      setRowToOpen = _useState2[1];\n\n  var _usePermissionsDataMa = usePermissionsDataManager(),\n      modifiedData = _usePermissionsDataMa.modifiedData,\n      onChangeCollectionTypeLeftActionRowCheckbox = _usePermissionsDataMa.onChangeCollectionTypeLeftActionRowCheckbox,\n      onChangeParentCheckbox = _usePermissionsDataMa.onChangeParentCheckbox,\n      onChangeSimpleCheckbox = _usePermissionsDataMa.onChangeSimpleCheckbox;\n\n  var isActive = rowToOpen === name;\n  var recursiveChildren = useMemo(function () {\n    if (!Array.isArray(childrenForm)) {\n      return [];\n    }\n\n    return childrenForm;\n  }, [childrenForm]);\n  var isCollapsable = recursiveChildren.length > 0;\n  var handleClick = useCallback(function () {\n    if (isCollapsable) {\n      setRowToOpen(function (prev) {\n        if (prev === name) {\n          return null;\n        }\n\n        return name;\n      });\n    }\n  }, [isCollapsable, name]);\n\n  var handleChangeLeftRowCheckbox = function handleChangeLeftRowCheckbox(_ref4) {\n    var value = _ref4.target.value;\n    onChangeCollectionTypeLeftActionRowCheckbox(pathToData, propertyName, name, value);\n  };\n\n  var _useMemo = useMemo(function () {\n    return getRowLabelCheckboxeState(propertyActions, modifiedData, pathToData, propertyName, name);\n  }, [propertyActions, modifiedData, pathToData, propertyName, name]),\n      hasAllActionsSelected = _useMemo.hasAllActionsSelected,\n      hasSomeActionsSelected = _useMemo.hasSomeActionsSelected;\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Wrapper, {\n    alignItems: \"center\",\n    isCollapsable: isCollapsable,\n    isActive: isActive,\n    background: isOdd ? 'neutral100' : 'neutral0'\n  }, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(RowLabelWithCheckbox, {\n    onChange: handleChangeLeftRowCheckbox,\n    onClick: handleClick,\n    isCollapsable: isCollapsable,\n    isFormDisabled: isFormDisabled,\n    label: label,\n    someChecked: hasSomeActionsSelected,\n    value: hasAllActionsSelected,\n    isActive: isActive\n  }, required && /*#__PURE__*/React.createElement(RequiredSign, null), /*#__PURE__*/React.createElement(CarretIcon, {\n    $isActive: isActive\n  })), /*#__PURE__*/React.createElement(Flex, null, propertyActions.map(function (_ref5) {\n    var label = _ref5.label,\n        isActionRelatedToCurrentProperty = _ref5.isActionRelatedToCurrentProperty,\n        actionId = _ref5.actionId;\n\n    if (!isActionRelatedToCurrentProperty) {\n      return /*#__PURE__*/React.createElement(HiddenAction, {\n        key: label\n      });\n    }\n\n    var checkboxName = [].concat(_toConsumableArray(pathToData.split('..')), [actionId, 'properties', propertyName, name]);\n\n    if (!isCollapsable) {\n      var checkboxValue = get(modifiedData, checkboxName, false);\n      return /*#__PURE__*/React.createElement(Cell, {\n        key: actionId,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }, /*#__PURE__*/React.createElement(BaseCheckbox, {\n        disabled: isFormDisabled || IS_DISABLED,\n        name: checkboxName.join('..'),\n        \"aria-label\": formatMessage({\n          id: \"Settings.permissions.select-by-permission\",\n          defaultMessage: 'Select {label} permission'\n        }, {\n          label: \"\".concat(name, \" \").concat(label)\n        }) // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n        ,\n        onValueChange: function onValueChange(value) {\n          onChangeSimpleCheckbox({\n            target: {\n              name: checkboxName.join('..'),\n              value: value\n            }\n          });\n        },\n        value: checkboxValue\n      }));\n    }\n\n    var data = get(modifiedData, checkboxName, {});\n\n    var _getCheckboxState = getCheckboxState(data),\n        hasAllActionsSelected = _getCheckboxState.hasAllActionsSelected,\n        hasSomeActionsSelected = _getCheckboxState.hasSomeActionsSelected;\n\n    return /*#__PURE__*/React.createElement(Cell, {\n      key: label,\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    }, /*#__PURE__*/React.createElement(BaseCheckbox, {\n      disabled: isFormDisabled || IS_DISABLED,\n      name: checkboxName.join('..') // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n      ,\n      onValueChange: function onValueChange(value) {\n        onChangeParentCheckbox({\n          target: {\n            name: checkboxName.join('..'),\n            value: value\n          }\n        });\n      },\n      \"aria-label\": formatMessage({\n        id: \"Settings.permissions.select-by-permission\",\n        defaultMessage: 'Select {label} permission'\n      }, {\n        label: \"\".concat(name, \" \").concat(label)\n      }),\n      value: hasAllActionsSelected,\n      indeterminate: hasSomeActionsSelected\n    }));\n  })))), isActive && /*#__PURE__*/React.createElement(SubActionRow, {\n    childrenForm: recursiveChildren,\n    isFormDisabled: isFormDisabled,\n    parentName: name,\n    pathToDataFromActionRow: pathToData,\n    propertyName: propertyName,\n    propertyActions: propertyActions,\n    recursiveLevel: 0\n  }));\n};\n\nActionRow.defaultProps = {\n  childrenForm: [],\n  required: false\n};\nActionRow.propTypes = {\n  childrenForm: PropTypes.array,\n  label: PropTypes.string.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  name: PropTypes.string.isRequired,\n  pathToData: PropTypes.string.isRequired,\n  propertyActions: PropTypes.array.isRequired,\n  propertyName: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  isOdd: PropTypes.bool.isRequired\n};\nexport default /*#__PURE__*/memo(ActionRow);","map":null,"metadata":{},"sourceType":"module"}