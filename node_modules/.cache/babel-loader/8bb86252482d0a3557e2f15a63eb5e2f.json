{"ast":null,"code":"import React, { memo, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { BaseCheckbox } from '@strapi/design-system/BaseCheckbox';\nimport { Box } from '@strapi/design-system/Box';\nimport { Stack } from '@strapi/design-system/Stack';\nimport { Typography } from '@strapi/design-system/Typography';\nimport styled from 'styled-components';\nimport get from 'lodash/get';\n\nvar IS_DISABLED = function () {\n  if (window && window.strapi && window.strapi.isEE) {\n    return require('../../../../../../../../../ee/admin/pages/SettingsPage/pages/Roles/EditPage/components/GlobalActions/utils/constants')[\"default\"];\n  }\n\n  return require('./utils/constants')[\"default\"];\n}();\n\nimport { useIntl } from 'react-intl';\nimport { usePermissionsDataManager } from '../../../../../../../hooks';\nimport { cellWidth, firstRowWidth } from '../Permissions/utils/constants';\nimport { findDisplayedActions, getCheckboxesState } from './utils';\nvar CenteredStack = /*#__PURE__*/styled(Stack).withConfig({\n  displayName: \"GlobalActions__CenteredStack\",\n  componentId: \"sc-1vxwsjr-0\"\n})([\"align-items:center;justify-content:center;width:\", \";flex-shrink:0;\"], cellWidth);\n\nvar GlobalActions = function GlobalActions(_ref) {\n  var actions = _ref.actions,\n      isFormDisabled = _ref.isFormDisabled,\n      kind = _ref.kind;\n\n  var _useIntl = useIntl(),\n      formatMessage = _useIntl.formatMessage;\n\n  var _usePermissionsDataMa = usePermissionsDataManager(),\n      modifiedData = _usePermissionsDataMa.modifiedData,\n      onChangeCollectionTypeGlobalActionCheckbox = _usePermissionsDataMa.onChangeCollectionTypeGlobalActionCheckbox;\n\n  var displayedActions = useMemo(function () {\n    return findDisplayedActions(actions);\n  }, [actions]);\n  var checkboxesState = useMemo(function () {\n    return getCheckboxesState(displayedActions, modifiedData[kind]);\n  }, [modifiedData, displayedActions, kind]);\n  return /*#__PURE__*/React.createElement(Box, {\n    paddingBottom: 4,\n    paddingTop: 6,\n    style: {\n      paddingLeft: firstRowWidth\n    }\n  }, /*#__PURE__*/React.createElement(Stack, {\n    horizontal: true,\n    spacing: 0\n  }, displayedActions.map(function (_ref2) {\n    var label = _ref2.label,\n        actionId = _ref2.actionId;\n    return /*#__PURE__*/React.createElement(CenteredStack, {\n      key: actionId,\n      spacing: 3\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"sigma\",\n      textColor: \"neutral500\"\n    }, formatMessage({\n      id: \"Settings.roles.form.permissions.\".concat(label.toLowerCase()),\n      defaultMessage: label\n    })), /*#__PURE__*/React.createElement(BaseCheckbox, {\n      disabled: isFormDisabled || IS_DISABLED,\n      onValueChange: function onValueChange(value) {\n        onChangeCollectionTypeGlobalActionCheckbox(kind, actionId, value);\n      },\n      name: actionId,\n      \"aria-label\": formatMessage({\n        id: \"Settings.permissions.select-all-by-permission\",\n        defaultMessage: 'Select all {label} permissions'\n      }, {\n        label: formatMessage({\n          id: \"Settings.roles.form.permissions.\".concat(label.toLowerCase()),\n          defaultMessage: label\n        })\n      }),\n      value: get(checkboxesState, [actionId, 'hasAllActionsSelected'], false),\n      indeterminate: get(checkboxesState, [actionId, 'hasSomeActionsSelected'], false)\n    }));\n  })));\n};\n\nGlobalActions.defaultProps = {\n  actions: []\n};\nGlobalActions.propTypes = {\n  actions: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    actionId: PropTypes.string.isRequired,\n    subjects: PropTypes.array.isRequired\n  })),\n  isFormDisabled: PropTypes.bool.isRequired,\n  kind: PropTypes.string.isRequired\n};\nexport default /*#__PURE__*/memo(GlobalActions);","map":null,"metadata":{},"sourceType":"module"}