{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ChevronDown from '@strapi/icons/ChevronDown';\nimport ChevronUp from '@strapi/icons/ChevronUp';\nimport { BaseCheckbox } from '@strapi/design-system/BaseCheckbox';\nimport { Box } from '@strapi/design-system/Box';\nimport { Flex } from '@strapi/design-system/Flex';\nimport get from 'lodash/get';\nimport omit from 'lodash/omit';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nvar IS_DISABLED = function () {\n  if (window && window.strapi && window.strapi.isEE) {\n    return require('../../../../../../../../../../ee/admin/pages/SettingsPage/pages/Roles/EditPage/components/ContentTypeCollapse/Collapse/utils/constants')[\"default\"];\n  }\n\n  return require('./utils/constants')[\"default\"];\n}();\n\nimport { usePermissionsDataManager } from '../../../../../../../../hooks';\nimport ConditionsButton from '../../ConditionsButton';\nimport ConditionsModal from '../../ConditionsModal';\nimport HiddenAction from '../../HiddenAction';\nimport { cellWidth, rowHeight } from '../../Permissions/utils/constants';\nimport RowLabelWithCheckbox from '../../RowLabelWithCheckbox';\nimport { getCheckboxState } from '../../utils';\nimport generateCheckboxesActions from './utils/generateCheckboxesActions';\nimport activeStyle from '../utils/activeStyle';\n\nvar activeRowStyle = function activeRowStyle(theme, isActive) {\n  return \"\\n  \".concat(Wrapper, \" {\\n    background-color: \").concat(theme.colors.primary100, \";\\n    color: \").concat(theme.colors.primary600, \";\\n    border-radius: \").concat(isActive ? '2px 2px 0 0' : '2px', \";\\n  }\\n  \").concat(Chevron, \" {\\n    display: flex;\\n  }\\n  \").concat(ConditionsButton, \" {\\n    display: block;\\n  }\\n  &:hover {\\n   \").concat(activeStyle(theme), \"\\n  }\\n\\n  &:focus-within {\\n    \").concat(function (_ref) {\n    var theme = _ref.theme,\n        isActive = _ref.isActive;\n    return activeRowStyle(theme, isActive);\n  }, \"\\n  }\\n  \\n\");\n};\n\nvar Wrapper = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"Collapse__Wrapper\",\n  componentId: \"sc-132fji1-0\"\n})([\"flex:1;display:flex;align-items:center;height:\", \";background-color:\", \";border:1px solid transparent;\"], rowHeight, function (_ref2) {\n  var isGrey = _ref2.isGrey,\n      theme = _ref2.theme;\n  return isGrey ? theme.colors.neutral100 : theme.colors.neutral0;\n});\nvar BoxWrapper = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"Collapse__BoxWrapper\",\n  componentId: \"sc-132fji1-1\"\n})([\"display:inline-flex;min-width:100%;\", \"{display:none;}\", \" &:hover{\", \"}\"], ConditionsButton, function (_ref3) {\n  var isActive = _ref3.isActive,\n      theme = _ref3.theme;\n  return isActive && activeRowStyle(theme, isActive);\n}, function (_ref4) {\n  var theme = _ref4.theme,\n      isActive = _ref4.isActive;\n  return activeRowStyle(theme, isActive);\n});\nvar Cell = /*#__PURE__*/styled(Flex).withConfig({\n  displayName: \"Collapse__Cell\",\n  componentId: \"sc-132fji1-2\"\n})([\"width:\", \";position:relative;\"], cellWidth);\nvar Chevron = /*#__PURE__*/styled(Box).withConfig({\n  displayName: \"Collapse__Chevron\",\n  componentId: \"sc-132fji1-3\"\n})([\"display:none;svg{width:11px;}*{fill:\", \";}\"], function (_ref5) {\n  var theme = _ref5.theme;\n  return theme.colors.primary600;\n});\nvar TinyDot = /*#__PURE__*/styled.span.withConfig({\n  displayName: \"Collapse__TinyDot\",\n  componentId: \"sc-132fji1-4\"\n})([\"position:absolute;top:-6px;left:37px;width:6px;height:6px;border-radius:20px;background:\", \";\"], function (_ref6) {\n  var theme = _ref6.theme;\n  return theme.colors.primary600;\n});\nvar AbsoluteBox = /*#__PURE__*/styled(Box).withConfig({\n  displayName: \"Collapse__AbsoluteBox\",\n  componentId: \"sc-132fji1-5\"\n})([\"position:absolute;right:9px;transform:translateY(10px);\"]);\n\nvar Collapse = function Collapse(_ref7) {\n  var availableActions = _ref7.availableActions,\n      isActive = _ref7.isActive,\n      isGrey = _ref7.isGrey,\n      isFormDisabled = _ref7.isFormDisabled,\n      label = _ref7.label,\n      onClickToggle = _ref7.onClickToggle,\n      pathToData = _ref7.pathToData;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isModalOpen = _useState2[0],\n      setModalOpen = _useState2[1];\n\n  var _useIntl = useIntl(),\n      formatMessage = _useIntl.formatMessage;\n\n  var _usePermissionsDataMa = usePermissionsDataManager(),\n      modifiedData = _usePermissionsDataMa.modifiedData,\n      onChangeParentCheckbox = _usePermissionsDataMa.onChangeParentCheckbox,\n      onChangeSimpleCheckbox = _usePermissionsDataMa.onChangeSimpleCheckbox;\n\n  var handleToggleModalIsOpen = function handleToggleModalIsOpen() {\n    setModalOpen(function (s) {\n      return !s;\n    });\n  };\n\n  var handleModalClose = function handleModalClose() {\n    setModalOpen(false);\n  }; // This corresponds to the data related to the CT left checkbox\n  // modifiedData: { collectionTypes: { [ctuid]: {create: {properties: { fields: {f1: true} }, update: {}, ... } } } }\n\n\n  var mainData = get(modifiedData, pathToData.split('..'), {}); // The utils we are using: getCheckboxState, retrieves all the boolean leafs of an object in order\n  // to return the state of checkbox. Since the conditions are not related to the property we need to remove the key from the object.\n\n  var dataWithoutCondition = useMemo(function () {\n    return Object.keys(mainData).reduce(function (acc, current) {\n      acc[current] = omit(mainData[current], 'conditions');\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  var _getCheckboxState = getCheckboxState(dataWithoutCondition),\n      hasAllActionsSelected = _getCheckboxState.hasAllActionsSelected,\n      hasSomeActionsSelected = _getCheckboxState.hasSomeActionsSelected; // Here we create an array of <checkbox>, since the state of each one of them is used in\n  // order to know if whether or not we need to display the associated action in\n  // the <ConditionsModal />\n\n\n  var checkboxesActions = useMemo(function () {\n    return generateCheckboxesActions(availableActions, modifiedData, pathToData);\n  }, [availableActions, modifiedData, pathToData]);\n  var doesConditionButtonHasConditions = checkboxesActions.some(function (_ref8) {\n    var hasConditions = _ref8.hasConditions;\n    return hasConditions;\n  });\n  return /*#__PURE__*/React.createElement(BoxWrapper, {\n    isActive: isActive\n  }, /*#__PURE__*/React.createElement(Wrapper, {\n    isGrey: isGrey\n  }, /*#__PURE__*/React.createElement(RowLabelWithCheckbox, {\n    isCollapsable: true,\n    isFormDisabled: isFormDisabled,\n    label: label,\n    checkboxName: pathToData,\n    onChange: onChangeParentCheckbox,\n    onClick: onClickToggle,\n    someChecked: hasSomeActionsSelected,\n    value: hasAllActionsSelected,\n    isActive: isActive\n  }, /*#__PURE__*/React.createElement(Chevron, {\n    paddingLeft: 2\n  }, isActive ? /*#__PURE__*/React.createElement(ChevronUp, null) : /*#__PURE__*/React.createElement(ChevronDown, null))), /*#__PURE__*/React.createElement(Flex, {\n    style: {\n      flex: 1\n    }\n  }, checkboxesActions.map(function (_ref9) {\n    var actionId = _ref9.actionId,\n        hasConditions = _ref9.hasConditions,\n        hasAllActionsSelected = _ref9.hasAllActionsSelected,\n        hasSomeActionsSelected = _ref9.hasSomeActionsSelected,\n        isDisplayed = _ref9.isDisplayed,\n        isParentCheckbox = _ref9.isParentCheckbox,\n        checkboxName = _ref9.checkboxName,\n        permissionLabel = _ref9.label;\n\n    if (!isDisplayed) {\n      return /*#__PURE__*/React.createElement(HiddenAction, {\n        key: actionId\n      });\n    }\n\n    if (isParentCheckbox) {\n      return /*#__PURE__*/React.createElement(Cell, {\n        key: actionId,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }, hasConditions && /*#__PURE__*/React.createElement(TinyDot, null), /*#__PURE__*/React.createElement(BaseCheckbox, {\n        disabled: isFormDisabled || IS_DISABLED,\n        name: checkboxName,\n        \"aria-label\": formatMessage({\n          id: \"Settings.permissions.select-by-permission\",\n          defaultMessage: 'Select {label} permission'\n        }, {\n          label: \"\".concat(permissionLabel, \" \").concat(label)\n        }) // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n        ,\n        onValueChange: function onValueChange(value) {\n          onChangeParentCheckbox({\n            target: {\n              name: checkboxName,\n              value: value\n            }\n          });\n        },\n        indeterminate: hasSomeActionsSelected,\n        value: hasAllActionsSelected\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(Cell, {\n      key: actionId,\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    }, hasConditions && /*#__PURE__*/React.createElement(TinyDot, null), /*#__PURE__*/React.createElement(BaseCheckbox, {\n      disabled: isFormDisabled || IS_DISABLED,\n      indeterminate: hasConditions,\n      name: checkboxName // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n      ,\n      onValueChange: function onValueChange(value) {\n        onChangeSimpleCheckbox({\n          target: {\n            name: checkboxName,\n            value: value\n          }\n        });\n      },\n      value: hasAllActionsSelected\n    }));\n  })), isModalOpen && /*#__PURE__*/React.createElement(ConditionsModal, {\n    headerBreadCrumbs: [label, 'app.components.LeftMenuLinkContainer.settings'],\n    actions: checkboxesActions,\n    isFormDisabled: isFormDisabled,\n    onClosed: handleModalClose,\n    onToggle: handleToggleModalIsOpen\n  })), /*#__PURE__*/React.createElement(AbsoluteBox, null, /*#__PURE__*/React.createElement(ConditionsButton, {\n    onClick: handleToggleModalIsOpen,\n    hasConditions: doesConditionButtonHasConditions\n  })));\n};\n\nCollapse.propTypes = {\n  availableActions: PropTypes.array.isRequired,\n  isActive: PropTypes.bool.isRequired,\n  isGrey: PropTypes.bool.isRequired,\n  isFormDisabled: PropTypes.bool.isRequired,\n  label: PropTypes.string.isRequired,\n  onClickToggle: PropTypes.func.isRequired,\n  pathToData: PropTypes.string.isRequired\n};\nexport default Collapse;","map":null,"metadata":{},"sourceType":"module"}